[{"title":"hexo同步到github","date":"2017-11-15T04:10:06.000Z","path":"2017/11/15/hexo同步到github/","text":"上传本地项目到github 建立Git仓库git init 将项目文件添加到仓库中git add . 注意：add后面有个 . 将我们添加的文件commit到git仓库， 添加注释git commit -m &quot;注释&quot; 将本地的仓库与github上的仓库进行关联 git remote add origin &quot;git仓库的地址&quot; 在这个工程中可能要求你输入账户密码，我们先保存ssh密钥在git上，使用git协议的地址就不会要求你输入了。 上传之前我们先从git上拉取一下 git pull origin master push本地项目到远程仓库git push -u origin master 至此项目就上传到github上了。","tags":[{"name":"hexo","slug":"hexo","permalink":"http://139.129.18.59/tags/hexo/"}]},{"title":"hexo代码高亮和自定义","date":"2017-01-15T03:10:06.000Z","path":"2017/01/15/hexo代码高亮和自定义/","text":"设置代码高亮设置好主题后，发布文章后，有的主题并没有设置代码高亮。要在hexo设置代码高亮，修改config： highlight: enable: true line_number: true auto_detect: true tab_replace: 然后themes的config也要添加相应的高亮配置。这段代码的作用，查看source/css/style.styl里面: @import &#39;nib&#39; global-reset() @import &#39;_base/variable&#39; @import &#39;_base/font&#39; @import &#39;_base/public&#39; @import &#39;_partial/header&#39; @import &#39;_partial/index&#39; @import &#39;_partial/article&#39; @import &#39;_partial/helper&#39; @import &#39;_partial/aside&#39; @import &#39;_partial/footer&#39; if highlight @import &#39;_base/code&#39; if duoshuo @import &#39;_partial/duoshuo&#39; if fancybox @import &#39;_partial/gallery&#39; 可以看到，如果设置highlight，那么就引入_base/code下面的css样式。 自定义代码高亮Wordpress有个Google Prettify插件，在这里也可以进行高亮显示。首先将config配置的highlight关闭： highlight: enable: false line_number: false auto_detect: false tab_replace: 然后我们需要下载prettify，并引入css和js文件 &lt;!-- 代码高亮--&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/prettify.css&quot; type=&quot;text/css&quot;&gt; &lt;script src=&quot;/js/prettify.js&quot;type=&quot;text/javascript&quot;&gt;&lt;/script&gt; 这段代码需要在页面的head引入：在layout的head.ejs文件中，我们可以查看有js,css文件引入，后面添加即可。 最后我们需要在网页加载完成之后调用即可： $(window).load(function(){ $(&#39;pre&#39;).addClass(&#39;prettyprint linenums&#39;).attr(&#39;style&#39;, &#39;overflow:auto;&#39;); prettyPrint(); }) 注意：这段代码使用$(window).load，这是在页面加载完成后调用，跟(document).ready(function() 有所区别。前者只能调用一次，后者能调用多次。在这里，我们添加到文件after_footer.ejs中 $(document).ready(function(){ console.log(&quot;执行调用prettify start&quot;); $(&#39;pre&#39;).addClass(&#39;prettyprint linenums&#39;).attr(&#39;style&#39;, &#39;overflow:auto;&#39;); prettyPrint(); console.log(&quot;执行调用prettify end&quot;); 另外关于代码高亮的主题，可以在这个网站选择一套你喜欢的主题替换上面的prettify.css即可。最后添加代码如下： #head.ejs &lt;!-- 代码高亮--&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/tranquil-heart.min.css&quot; type=&quot;text/css&quot;&gt; &lt;script src=&quot;/js/prettify.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;","tags":[{"name":"hexo代码高亮","slug":"hexo代码高亮","permalink":"http://139.129.18.59/tags/hexo代码高亮/"}]},{"title":"hexo发布文章注意","date":"2017-01-14T03:10:06.000Z","path":"2017/01/14/hexo配置注意的地方/","text":"注意点1：发布的时候,检查_config.yml内容，特别注意:后面需要有一个空格：tags: markdown不然会报错：can not read a block mapping entry; a multiline key may not be an implicit key","tags":[{"name":"hexo配置","slug":"hexo配置","permalink":"http://139.129.18.59/tags/hexo配置/"}]},{"title":"hexo部署和自动化发布","date":"2016-11-14T03:10:06.000Z","path":"2016/11/14/hexo自动化/","text":"这里安装hexo过程省略，参考其他文章。这里主要说下如何利用git自动化发布： 安装git：sudo apt-get install git 创建GitHub Repository ，在git上创建一个reop库，取名hexo_static 安装插件 $ npm install hexo-deployer-git --save 修改配置文件 deploy: type: git repo: git@github.com:$username/hexo_static.git branch: master 注意替换username为自己的git名字，注意这里如果使用https协议的git，那么每次都会要求输入账户和密码，这里使用git协议，在ssh里保存密钥，这样不用每次都输入密码 执行命令 $ hexo generate $ hexo deploy generate: 生成静态文件，文件生成在pulic目录下deploy: 发布到git的库hexo_static 实现自动化 这里实现自动化思路：通过git –bare 生成一个裸库bare，裸库bare作为一个远程库remote，在裸库实现一个钩子post-receive，当本地库进行push的时候，自动运行钩子，从而更新静态文件目录A，使用nginx进行转发到静态文件目录A。 第1步：初始化空仓库 $ git init --bare ~/hexo_bare 第2步：初始化空仓库 $ vim ~/hexo_bare/hooks/post-receive 编辑: echo &quot;start 钩子&quot; git --work-tree=/usr/local/nginx/html/myblog --git-dir=/usr/local/hexo_bare checkout -f echo &quot;end 钩子&quot; 这里注意钩子post-ceive后面不带.sample，同时注意赋予权限： chmod +x post-receive 第3步：将空仓库关联到主仓库 $ git clone https://github.com/$username/hexo_static.git ~/hexo_static $ cd ~/hexo_static $ git remote add live ~/hexo_bare 这里给空库起名live ,可以在本地库hexo_static调用命令： git remote -v 查看到远程库名注意：查看下.git/config默认的库名是否是 [branch &quot;master&quot;] remote = origin merge = refs/heads/master 第4步：创建自动化脚本 $ vim ~/hexo_blog/hexo_git_deploy.sh 脚本内容： #!/bin/bash hexo clean hexo generate hexo deploy ( cd ~/hexo_static ; git pull origin; git push live master) 注意：这里一定要git pull origin,不然无法pull成功！ 第5步：nginx指定静态目录 在nginx的配置文件中配置即可 第6步：执行自动化 $ hexo new test $ sh hexo_git_deplay.sh 脚本自动化发布成功！可以看到钩子成功执行！查看nginx的静态目录。发现test文件已经存在，甚至不用重启nginx！至此完成自动化！","tags":[{"name":"hexo自动化","slug":"hexo自动化","permalink":"http://139.129.18.59/tags/hexo自动化/"}]},{"title":"markdown的使用方法","date":"2016-10-14T03:10:06.000Z","path":"2016/10/14/markdown使用/","text":"马克飞象是一款专为印象笔记（Evernote）打造的Markdown编辑器，通过精心的设计与技术实现，配合印象笔记强大的存储和同步功能，带来前所未有的书写体验。特点概述： 功能丰富 ：支持高亮代码块、LaTeX 公式、流程图，本地图片以及附件上传，甚至截图粘贴，工作学习好帮手； 得心应手 ：简洁高效的编辑器，提供桌面客户端以及离线Chrome App，支持移动端 Web； 深度整合 ：支持选择笔记本和添加标签，支持从印象笔记跳转编辑，轻松管理。 [TOC] Markdown简介 Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。 —— 维基百科 正如您在阅读的这份文档，它使用简单的符号标识不同的标题，将某些文字标记为粗体或者斜体，创建一个链接或一个脚注[^demo]。下面列举了几个高级功能，更多语法请按Ctrl + /查看帮助。 代码块@requires_authorization def somefunc(param1=&#39;&#39;, param2=0): &#39;&#39;&#39;A docstring&#39;&#39;&#39; if param1 &gt; param2: # interesting print &#39;Greater&#39; return (param2 - param1 + 1) or None class SomeClass: pass &gt;&gt;&gt; message = &#39;&#39;&#39;interpreter ... prompt&#39;&#39;&#39; LaTeX 公式可以创建行内公式，例如 $\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$。或者块级公式： $$ x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$ 表格 Item Value Qty Computer 1600 USD 5 Phone 12 USD 12 Pipe 1 USD 234 流程图st=&gt;start: Start e=&gt;end op=&gt;operation: My Operation cond=&gt;condition: Yes or No? st-&gt;op-&gt;cond cond(yes)-&gt;e cond(no)-&gt;op 以及时序图: Alice-&gt;Bob: Hello Bob, how are you? Note right of Bob: Bob thinks Bob--&gt;Alice: I am good thanks! 提示：想了解更多，请查看流程图语法以及时序图语法。 复选框使用 - [ ] 和 - [x] 语法可以创建复选框，实现 todo-list 等功能。例如： [x] 已完成事项 [ ] 待办事项1 [ ] 待办事项2 注意：目前支持尚不完全，在印象笔记中勾选复选框是无效、不能同步的，所以必须在马克飞象中修改 Markdown 原文才可生效。下个版本将会全面支持。 印象笔记相关笔记本和标签马克飞象增加了@(笔记本)[标签A|标签B]语法, 以选择笔记本和添加标签。 绑定账号后， 输入(自动会出现笔记本列表，请从中选择。 笔记标题马克飞象会自动使用文档内出现的第一个标题作为笔记标题。例如本文，就是第一行的 欢迎使用马克飞象。 快捷编辑保存在印象笔记中的笔记，右上角会有一个红色的编辑按钮，点击后会回到马克飞象中打开并编辑该笔记。 注意：目前用户在印象笔记中单方面做的任何修改，马克飞象是无法自动感知和更新的。所以请务必回到马克飞象编辑。 数据同步马克飞象通过将Markdown原文以隐藏内容保存在笔记中的精妙设计，实现了对Markdown的存储和再次编辑。既解决了其他产品只是单向导出HTML的单薄，又规避了服务端存储Markdown带来的隐私安全问题。这样，服务端仅作为对印象笔记 API调用和数据转换之用。 隐私声明：用户所有的笔记数据，均保存在印象笔记中。马克飞象不存储用户的任何笔记数据。 离线存储马克飞象使用浏览器离线存储将内容实时保存在本地，不必担心网络断掉或浏览器崩溃。为了节省空间和避免冲突，已同步至印象笔记并且不再修改的笔记将删除部分本地缓存，不过依然可以随时通过文档管理打开。 注意：虽然浏览器存储大部分时候都比较可靠，但印象笔记作为专业云存储，更值得信赖。以防万一，请务必经常及时同步到印象笔记。 编辑器相关设置右侧系统菜单（快捷键Ctrl + M）的设置中，提供了界面字体、字号、自定义CSS、vim/emacs 键盘模式等高级选项。 快捷键帮助 Ctrl + /同步文档 Ctrl + S创建文档 Ctrl + Alt + N最大化编辑器 Ctrl + Enter预览文档 Ctrl + Alt + Enter文档管理 Ctrl + O系统菜单 Ctrl + M 加粗 Ctrl + B插入图片 Ctrl + G插入链接 Ctrl + L提升标题 Ctrl + H 关于收费马克飞象为新用户提供 10 天的试用期，试用期过后需要续费才能继续使用。未购买或者未及时续费，将不能同步新的笔记。之前保存过的笔记依然可以编辑。 反馈与建议 微博：@马克飞象，@GGock 邮箱：&#104;&#117;&#x73;&#116;&#103;&#111;&#99;&#x6b;&#x40;&#x67;&#x6d;&#97;&#105;&#x6c;&#46;&#99;&#111;&#x6d; 感谢阅读这份帮助文档。请点击右上角，绑定印象笔记账号，开启全新的记录与分享体验吧。 [^demo]: 这是一个示例脚注。请查阅 MultiMarkdown 文档 关于脚注的说明。 限制： 印象笔记的笔记内容使用 ENML 格式，基于 HTML，但是不支持某些标签和属性，例如id，这就导致脚注和TOC无法正常点击。","tags":[{"name":"markdown","slug":"markdown","permalink":"http://139.129.18.59/tags/markdown/"}]}]